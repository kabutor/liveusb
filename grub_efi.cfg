#!/bin/sh -n
# Grub configuration file for liveusb
# Copyright 2019-2020 Alkis Georgopoulos <github.com/alkisg>
# SPDX-License-Identifier: GPL-3.0-or-later

set uuid_liveusb="56dae88c-82ec-11ed-bd74-c3d7a0c97a46"
set labelliveusb="ISOs"
search --no-floppy --fs-uuid --set=liveusb "$uuid_liveusb"
liveusb=($liveusb)
set default=0
set fallback=1
set timeout=5
set menu_color_normal=white/blue; export menu_color_normal
set menu_color_highlight=black/light-gray; export menu_color_highlight
insmod regexp
insmod part_gpt
insmod all_video
# Remove tpm to avoid https://bugs.debian.org/959425
rmmod tpm
# Hardcode rootuuid first, then try to autodetect it
rootuuid="1973-2010"
# I think sometimes root was empty, not sure when
if [ -z "$root" ]; then
  search --no-floppy --fs-uuid --set=root "$uuid_liveusb"
fi
probe --set=rootuuid --fs-uuid "$uuid_liveusb"

# Source a user-defined file, where the user can provide ${distro}_params="..."
if [ -f /grub/local.cfg ]; then
  source /grub/local.cfg
fi

if background_color 44,0,30; then
  clear
fi

if [ -s "/grub/grubenv" ]; then
  set have_grubenv=true
  load_env
  set default="${saved_entry}"
fi

function save_default {
  if [ "$have_grubenv" = "true" ]; then
    saved_entry="${chosen}"
    save_env saved_entry
  fi
}

# clonezilla-live-2.6.5-21-amd64.iso cmdline
# BOOT_IMAGE=/live/vmlinuz initrd=/live/initrd.img boot=live union=overlay username=user config components quiet noswap edd=on nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=788 ip= net.ifnames=0  splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1
function set_clonezilla {
  kerneldir="live"
  cmdline="fromiso=/dev/disk/by-uuid/$uuid_liveusb/clonezilla/$isoname boot=live union=overlay username=user config components noswap edd=on nomodeset enforcing=0 locales= keyboard-layouts= ocs_live_run=ocs-live-general ocs_live_extra_param= ocs_live_batch=no vga=788 ip= net.ifnames=0  splash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1"
}

# debian-live-10.3.0-i386-lxqt+nonfree.iso cmdline (with localization):
# BOOT_IMAGE=/live/vmlinuz-4.19.0-8-686 initrd=/live/initrd.img-4.19.0-8-868 boot=live components quiet splash (locales=el_GR.UTF-8)
function set_debian {
  kerneldir="live"
  cmdline="fromiso=/dev/disk/by-uuid/$uuid_liveusb/debian/$isoname boot=live components"
}

# Fedora-Workstation-Live-x86_64-32-1.6.iso cmdline:
# BOOT_IMAGE=vmlinuz root=live:CDLABEL=Fedora-WS-Live-32-1-6 rd.live.image quiet
function set_fedora {
  # Dracut needs the live CD label
  probe --set=label --label (loop)
  kerneldir="isolinux"
  # notes: root=live:/dev/loop0 rd.break=pre-mount
  cmdline="iso-scan/filename=$iso root=live:CDLABEL=$label rd.live.image"
}

# kali-linux-xfce-2019.2-amd64.iso cmdline:
# BOOT_IMAGE=/live/vmlinuz initrd=/live/initrd.img boot=live components splash username=root hostname=kali
function set_kali {
  kerneldir="live"
  cmdline="fromiso=/dev/disk/by-uuid/$uuid_liveusb/kali/$isoname boot=live components username=root hostname=kali"
}

# ubuntu-20.04-desktop-amd64.iso cmdline (with localization):
# file=/cdrom/preseed/ubuntu.seed initrd=/casper/initrd quiet splash (--- debian-installer/language=el keyboard-configuration/layoutcode?=gr)
function set_ubuntu {
  kerneldir="casper"
  # Extract the flavor for the preseed kernel parameter.
  # Example: ubuntu-mate-20.04-desktop-amd64.iso
  # This won't work for betas, e.g. focal-desktop-amd64.iso.
  if regexp -s 2:flavor "(.*)/([a-z-]*)-[0-9.]*-.*" "$iso"; then
    seed=" file=/cdrom/preseed/$flavor.seed"
  else
    seed=""
  fi
    
  # Pass fsck.mode=skip to avoid the 20.04+ default integrity check
  cmdline="iso-scan/filename=/ubuntu/$isoname"
}

function livecd {
  isoname=$1
  distro=$2
  iso=$3
  params="$4"
  echo "Debug"
  if ! loopback loop "$iso"; then
    echo "ERROR: couldn not mount $iso"
    return 1
  fi
  echo "Mounting $iso"
  # Set some defaults, allow distro functions to override them
  # E.g. kerneldir="*" in debian matches both d-i and live
  kerneldir="*"
  kernelglob="vmlinu*"
  initrdglob="initr*"
  if ! "set_$distro" "$iso"; then
    echo "ERROR: A set_$distro function needs to be implemented"
    return 1
  fi
  if [ -n "$params" ]; then
    cmdline="$cmdline $params"
  fi
  for kernel in "(loop)"/$kerneldir/$kernelglob; do
    if [ -f "$kernel" ]; then
      break
    fi
  done
  for initrd in "(loop)"/$kerneldir/$initrdglob; do
    if [ -f "$initrd" ]; then
      break
    fi
  done
  echo "Loading $kernel"
  if ! linux $kernel $cmdline; then
    # 32 bit fails on secure boot with: vmlinuz has invalid signature
    echo "ERROR: could not load $kernel, maybe disable UEFI secure boot?"
    return 1
  fi
  echo "Loading $initrd"
  if ! initrd "$initrd"; then
    echo "ERROR: could not load $inird"
    return 1
  fi
  echo "Booting $iso $cmdline"
  loopback -d loop
  save_default
}

if [ -f "$liveusb/ltsp/ltsp.img" ]; then
menuentry "LTSP image" {
  save_default
  insmod squash4
  loopback loop  "$liveusb/ltsp/x86_64.img"
  linux (loop)/boot/vmlinuz initrd=ltsp.img initrd=initrd.img \
    root=LABEL=LIVEUSB ltsp.image=liveusb/ltsp/x86_64.img
  initrd "$liveusb/ltsp/ltsp.img" (loop)/boot/initrd.img
  boot
}
fi

for distrodir in "$liveusb/"*; do
  regexp -s 2:distro "(.*)/([^/]*)" "$distrodir"
  for iso in "$liveusb/$distro/"*".iso"; do
    if [ -f "$iso" ]; then
      if regexp -s 3:isoname "(.*)/([^/]*)/([^/]*)" "$iso"; then
        # Pass them as a parameter to be editable with "e" in grub UI
        eval "params=\"\$${distro}_params\""
        menuentry "$isoname" "$distro" "$iso" "$params" {
          livecd "$1" "$2" "$3" "$4"
        }
      fi
    fi
  done
done

menuentry "Network boot (iPXE)" {
  save_default
  chainloader /efi/ipxe.efi
}

menuentry "Memory test" {
  save_default
  chainloader /efi/memtest86.efi
}

if [ "$grub_platform" = "efi" ]; then
  menuentry "Enter UEFI setup" {
    save_default
    fwsetup
  }
else
  menuentry "Boot DOS" {
    save_default
    linux16 $liveusb/memdisk/memdisk
    initrd16 $liveusb/memdisk/dos.img
  }
fi

if [ -f /bootmgr ]; then
menuentry "Windows 10 setup" {
  save_default
  if [ "$grub_platform" = "efi" ]; then
    # This is Microsoft's bootx64.efi, renamed
    chainloader /EFI/BOOT/bootx64m.efi
  else
    insmod ntldr
    ntldr /bootmgr
  fi
}
fi
